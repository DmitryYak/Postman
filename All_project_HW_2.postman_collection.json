{
	"info": {
		"_postman_id": "a03fcf7e-9340-4218-bd3b-48e1a6fe2c91",
		"name": "All_project_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17878375"
	},
	"item": [
		{
			"name": "first_req_HW_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "second_req_HW_2_user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"//http://162.55.220.72:5005/user_info_3 send\r",
							"// 2. Статус код 200\r",
							"pm.test(\"1. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let jsonData = JSON.parse(responseBody);\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"2. Name from request the same from response\", function () {\r",
							"    let name_is = request.data.name\r",
							"pm.expect(name_is).to.eql(\"Dmitry\");\r",
							"});\r",
							"//или\r",
							"pm.test(\"3. Check include name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Dmitry\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"4. Age from request the same from response\", function () {\r",
							"pm.expect(jsonData.age).to.eql(\"37\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"5. Salary from request the same from response\", function () {\r",
							"    let salary_is = String(jsonData.salary)\r",
							"pm.expect(salary_is).to.eql(\"2000\");\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let request_pars = request.data\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"6. Name from request the same from response\", function () {\r",
							" let name_from_req = request_pars.name   \r",
							"pm.expect(jsonData.name).to.eql(name_from_req);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"7. Age from request the same from response\", function () {\r",
							"    let age_from_resp = request_pars.age\r",
							"pm.expect(jsonData.age).to.eql(age_from_resp);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"8. Salary from request the same from response two\", function () {\r",
							"  let salary_from_resp_string = String (jsonData.salary)  \r",
							"pm.expect(request_pars.salary).to.include(salary_from_resp_string);\r",
							"});\r",
							"\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"9. Salary*4\", function() {\r",
							"let salary_15 = jsonData.family.u_salary_1_5_year\r",
							"let salary_now = request.data.salary\r",
							"    pm.expect(salary_15).to.eql(salary_now*4)\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitry",
							"type": "text"
						},
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000\n",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry",
							"disabled": true
						},
						{
							"key": "age",
							"value": "37",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "third_req_HW_2_object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/object_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let request_pars = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let name_response = request_pars.name\r",
							"pm.test(\"Name in respond is correspond to request\", function() {\r",
							"    pm.expect(name_response).to.eql(\"Dmitry\")\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let age_response = request_pars.age \r",
							"pm.test(\"Age in respond is correspond to request\", function() {\r",
							"    pm.expect(age_response).to.eql(\"37\")\r",
							"})\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let salary_response = String(jsonData.salary);\r",
							"let request_salary = request_pars.salary\r",
							"pm.test(\"check salary in the respond correspond to request\", function(){\r",
							"    pm.expect(salary_response).to.eql(request_salary)\r",
							"})\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let family_from_response = jsonData.family;\r",
							"console.log(family_from_response);\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Dog has a name in params\", function(){\r",
							"    pm.expect(jsonData.family.pets).to.property(\"dog\")\r",
							"})\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog has age\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.property(\"age\")\r",
							"})\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Name has Luky\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.include(\"Luky\")\r",
							"})\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"age of dog has '4'\", function(){\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitry",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "37",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2000\n",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Dmitry&age=37&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fourth_req_HW_2_object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test('status code is 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let request_pars = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name in response equals in the request\", function(){\r",
							"    let name_from_resp = jsonData.name \r",
							"    pm.expect(name_from_resp).to.eql(request_pars.name)\r",
							"})\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"age in response equals in the request\", function(){\r",
							"    let age_response = String (jsonData.age)\r",
							"    pm.expect(age_response).to.eql(request_pars.age)\r",
							"})\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(request_pars.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Chek salary in the response the same in request 0 el\", function(){\r",
							"    let salary_0_el = String (jsonData.salary[0])\r",
							"    pm.expect(salary_0_el).to.eql(request_pars.salary)\r",
							"})\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"chek the first el in the salary eql salary*2 in request\", function(){\r",
							"    let salary_x2_req = request_pars.salary * 2\r",
							"    let first_el_salary = String (jsonData.salary[1]);\r",
							"    pm.expect(first_el_salary).to.include(salary_x2_req)\r",
							"})\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"chek the second el in the salary eql salary *3 in request\", function(){\r",
							"    let second_el_salary_resp = String (jsonData.salary[2]);\r",
							"    let salary_x3_req = request_pars.salary * 3;\r",
							"    pm.expect(second_el_salary_resp).to.include(salary_x3_req);\r",
							"})\r",
							"// 15. Создать в окружении переменную name\r",
							"// http://162.55.220.72:5005/object_info_4?name={{name}}&age=37&salary=2000\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"//http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary=2000\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"// http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"jsonData.salary.forEach(sal => console.log(sal))"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dmitry",
							"type": "text",
							"disabled": true
						},
						{
							"key": "age",
							"value": "37",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2000\n",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "fifth_req_HW_2_user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test('status code is 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"})\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req_pars = request.data\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test('chek response have Start_qa_salary', function(){\r",
							"    pm.expect(jsonData).to.property('start_qa_salary')\r",
							"})\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test('response property qa_salary_after_6_months', function(){\r",
							"    pm.expect(jsonData).to.property('qa_salary_after_6_months')\r",
							"})\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test('response property qa_salary_after_12_months', function(){\r",
							"    pm.expect(jsonData).to.property('qa_salary_after_12_months')\r",
							"})\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test('response property qa_salary_after_1.5_year', function(){\r",
							"    pm.expect(jsonData).to.property(\"qa_salary_after_1.5_year\")\r",
							"})\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test('response property qa_salary_after_3.5_years', function(){\r",
							"    pm.expect(jsonData).to.property('qa_salary_after_3.5_years')\r",
							"})\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test('response property person', function(){\r",
							"    pm.expect(jsonData).to.property('person')\r",
							"})\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test('start_qa_salary from request eql response', function(){\r",
							"    let string_salary = String (jsonData.start_qa_salary)\r",
							"    pm.expect(string_salary).to.eql(req_pars.salary)\r",
							"})\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_6_months include request', function(){\r",
							"   let string_salary_6 = String (jsonData.qa_salary_after_6_months)\r",
							"   console.log(typeof string_salary_6)\r",
							"   let salary_x2 = req_pars.salary * 2\r",
							"    pm.expect(string_salary_6).to.include(salary_x2)\r",
							"})\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_12_months include salary 2.7', function(){\r",
							"    let salary_12 = String (jsonData.qa_salary_after_12_months)\r",
							"    let salary_x2Poin7 = req_pars.salary\r",
							"    pm.expect(salary_12).to.include(salary_x2Poin7 * 2.7)\r",
							"})\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_1.5_year include salary *3.3', function(){\r",
							"    let salary1poind5 = String (jsonData['qa_salary_after_1.5_year'])\r",
							"    let salary_x3poind3 = req_pars.salary\r",
							"    pm.expect(salary1poind5).to.include(salary_x3poind3 * 3.3)\r",
							"})\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test('qa_salary_after_3.5_years include salary *3.8', function(){\r",
							"    let salary_resp_3poind5 = String (jsonData['qa_salary_after_3.5_years'])\r",
							"    let salary_x3poind8 = req_pars.salary\r",
							"    pm.expect(salary_resp_3poind5).to.include(salary_x3poind8 * 3.8)\r",
							"})\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test('person from u_name eql salary', function(){\r",
							"    pm.expect(String (jsonData.person.u_name[1])).to.eql(req_pars.salary)\r",
							"})\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(' u_age eql age from request', function(){\r",
							"    pm.expect(String (jsonData.person.u_age)).to.eql(req_pars.age)\r",
							"})\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test('u_salary_5_years inc salary*4.2', function(){\r",
							"    pm.expect(String(jsonData.person.u_salary_5_years)).to.include(req_pars.salary * 4.2);\r",
							"})\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"jsonData.person.u_name.forEach(el => console.log(el))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "Dmitry",
							"disabled": true
						},
						{
							"key": "age",
							"value": "37",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "2000",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}